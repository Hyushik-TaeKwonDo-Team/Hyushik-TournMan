<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="BreakingEntryDeletedMessage" xml:space="preserve">
    <value>Breaking Entry for "{0}" has been deleted</value>
  </data>
  <data name="BreakingJudgeScoreEnteredMessage" xml:space="preserve">
    <value>Breaking score entered for "{0}"</value>
  </data>
  <data name="BreakingResultCreatedMessage" xml:space="preserve">
    <value>Breaking Result recorded for "{0}"</value>
  </data>
  <data name="CsvFileReadSuccessfullyMessage" xml:space="preserve">
    <value>The file was loaded sucessfully!</value>
  </data>
  <data name="CsvParseYesNoErrorMessage" xml:space="preserve">
    <value>Invalid input for Yes/No string in file: {0}</value>
  </data>
  <data name="FileUnreadableMessage" xml:space="preserve">
    <value>The file was empty or could not be read.</value>
  </data>
  <data name="FormDeletedMessage" xml:space="preserve">
    <value>Form attempt for "{0}" has been deleted.</value>
  </data>
  <data name="FormScoreAddedMessage" xml:space="preserve">
    <value>Form scoring has started for "{0}"</value>
  </data>
  <data name="FormScoreJudgedMessage" xml:space="preserve">
    <value>Form for "{0}" has been scored "{1}"</value>
  </data>
  <data name="LoginSuccessfulMessage" xml:space="preserve">
    <value>You have successfully logged in</value>
  </data>
  <data name="LogoutSucessfulMessage" xml:space="preserve">
    <value>You have been logged out</value>
  </data>
  <data name="NewTournamentCreatedMessage" xml:space="preserve">
    <value>The tournament "{0}" was successfully created.</value>
  </data>
  <data name="ParticipantCheckedInToRingMessage" xml:space="preserve">
    <value>"{0}" was checked into ring "{1}"</value>
  </data>
  <data name="ParticipantsInRingsHaveBeenUpdatedMessage" xml:space="preserve">
    <value>Participants In Rings Have Been Updated</value>
  </data>
  <data name="PossibleBoardDepthsUpdatedMessage" xml:space="preserve">
    <value>Possible board depths have been updated</value>
  </data>
  <data name="PossibleBoardWidthsUpdatedMessage" xml:space="preserve">
    <value>Possible board widths have been updated</value>
  </data>
  <data name="RingCreatedMessage" xml:space="preserve">
    <value>Ring "{0}" has been created.</value>
  </data>
  <data name="RingDeletedMessage" xml:space="preserve">
    <value>Ring "{0}" has been deleted.</value>
  </data>
  <data name="SetBreakingResultsPrivateMessage" xml:space="preserve">
    <value>Breaking Results have been hidden for ring "{0}"</value>
  </data>
  <data name="SetBreakingResultsPublicMessage" xml:space="preserve">
    <value>Breaking Results have been made public for ring "{0}"</value>
  </data>
  <data name="SetFormResultsPrivateMessage" xml:space="preserve">
    <value>Form Results have been hidden for ring "{0}"</value>
  </data>
  <data name="SetFormResultsPublicMessage" xml:space="preserve">
    <value>Form Results have been made public for ring "{0}"</value>
  </data>
  <data name="SetSparringResultsPrivateMessage" xml:space="preserve">
    <value>Sparring Results have been hidden for ring "{0}"</value>
  </data>
  <data name="SetSparringResultsPublicMessage" xml:space="preserve">
    <value>Sparring Results have been made public for ring "{0}"</value>
  </data>
  <data name="SetWeaponResultsPrivateMessage" xml:space="preserve">
    <value>Weapon Results have been hidden for ring "{0}"</value>
  </data>
  <data name="SetWeaponResultsPublicMessage" xml:space="preserve">
    <value>Weapon Results have been made public for ring "{0}"</value>
  </data>
  <data name="SparringDeletedMessage" xml:space="preserve">
    <value>Sparring result for "{0} vs {1}" in Round {2} has been deleted.</value>
  </data>
  <data name="SparringResultCreatedMessage" xml:space="preserve">
    <value>Sparring result for "{0} vs {1}" in Round {2} has been created</value>
  </data>
  <data name="TechniqueAddedMessage" xml:space="preserve">
    <value>Technique "{0}" was added</value>
  </data>
  <data name="TechniqueDeletedMessage" xml:space="preserve">
    <value>Technique "{0}" has been deleted</value>
  </data>
  <data name="TechniqueUpdatedMessage" xml:space="preserve">
    <value>Technique "{0}" was updated</value>
  </data>
  <data name="TournamentActivatedMessage" xml:space="preserve">
    <value>The tournament "{0}" has been activated</value>
  </data>
  <data name="TournamentDeactivatedMessage" xml:space="preserve">
    <value>The tournament "{0}" has been deactivated</value>
  </data>
  <data name="TournamentMustHaveNameMessage" xml:space="preserve">
    <value>A tournament must have a name.</value>
  </data>
  <data name="TournamentNameInUseMessage" xml:space="preserve">
    <value>Tournament name "{0}" is already in use.</value>
  </data>
  <data name="TournamentNotFoundMessage" xml:space="preserve">
    <value>The requested tournament could not be found</value>
  </data>
  <data name="UserAddedRoleMessage" xml:space="preserve">
    <value>Role "{1}" has been given to user "{0}"</value>
  </data>
  <data name="UserAlreadyHasRoleMessage" xml:space="preserve">
    <value>User "{0}" already has role "{1}"</value>
  </data>
  <data name="UserDoesNotAlreadyHaveRoleMessage" xml:space="preserve">
    <value>User "{0}" does not have role "{1}"</value>
  </data>
  <data name="UserRemovedRoleMessage" xml:space="preserve">
    <value>Role "{1}" has been revoked from user "{0}"</value>
  </data>
  <data name="WeaponDeletedMessage" xml:space="preserve">
    <value>Weapon attempt for "{0}" has been deleted.</value>
  </data>
  <data name="WeaponScoreAddedMessage" xml:space="preserve">
    <value>Weapon scoring has started for "{0}"</value>
  </data>
  <data name="WeaponScoreJudgedMessage" xml:space="preserve">
    <value>Weapon for "{0}" has been scored "{1}"</value>
  </data>
</root>